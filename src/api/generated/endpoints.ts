/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * drawdb-pg-server
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

import type {
  CreateDiagramApiV1DiagramPostBody,
  DiagramDataResponse,
  DiagramResponse,
  HTTPValidationError,
  UpdateDiagramApiV1DiagramDiagramIdPutBody
} from './models';

type AwaitedInput<T> = PromiseLike<T> | T;

      type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;




/**
 * Get all diagrams.
 * @summary Get All Diagrams
 */
export const getAllDiagramsApiV1DiagramGet = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<DiagramResponse[]>> => {
    
    
    return axios.get(
      `http://localhost:8000/api/v1/diagram/`,options
    );
  }


export const getGetAllDiagramsApiV1DiagramGetQueryKey = () => {
    return [`http://localhost:8000/api/v1/diagram/`] as const;
    }

    
export const getGetAllDiagramsApiV1DiagramGetQueryOptions = <TData = Awaited<ReturnType<typeof getAllDiagramsApiV1DiagramGet>>, TError = AxiosError<unknown>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllDiagramsApiV1DiagramGet>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAllDiagramsApiV1DiagramGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllDiagramsApiV1DiagramGet>>> = ({ signal }) => getAllDiagramsApiV1DiagramGet({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAllDiagramsApiV1DiagramGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAllDiagramsApiV1DiagramGetQueryResult = NonNullable<Awaited<ReturnType<typeof getAllDiagramsApiV1DiagramGet>>>
export type GetAllDiagramsApiV1DiagramGetQueryError = AxiosError<unknown>


export function useGetAllDiagramsApiV1DiagramGet<TData = Awaited<ReturnType<typeof getAllDiagramsApiV1DiagramGet>>, TError = AxiosError<unknown>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllDiagramsApiV1DiagramGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllDiagramsApiV1DiagramGet>>,
          TError,
          Awaited<ReturnType<typeof getAllDiagramsApiV1DiagramGet>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAllDiagramsApiV1DiagramGet<TData = Awaited<ReturnType<typeof getAllDiagramsApiV1DiagramGet>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllDiagramsApiV1DiagramGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllDiagramsApiV1DiagramGet>>,
          TError,
          Awaited<ReturnType<typeof getAllDiagramsApiV1DiagramGet>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAllDiagramsApiV1DiagramGet<TData = Awaited<ReturnType<typeof getAllDiagramsApiV1DiagramGet>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllDiagramsApiV1DiagramGet>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get All Diagrams
 */

export function useGetAllDiagramsApiV1DiagramGet<TData = Awaited<ReturnType<typeof getAllDiagramsApiV1DiagramGet>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllDiagramsApiV1DiagramGet>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAllDiagramsApiV1DiagramGetQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Create new diagram.
 * @summary Create Diagram
 */
export const createDiagramApiV1DiagramPost = (
    createDiagramApiV1DiagramPostBody: CreateDiagramApiV1DiagramPostBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<DiagramDataResponse>> => {
    
    
    return axios.post(
      `http://localhost:8000/api/v1/diagram/`,
      createDiagramApiV1DiagramPostBody,options
    );
  }



export const getCreateDiagramApiV1DiagramPostMutationOptions = <TError = AxiosError<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createDiagramApiV1DiagramPost>>, TError,{data: CreateDiagramApiV1DiagramPostBody}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof createDiagramApiV1DiagramPost>>, TError,{data: CreateDiagramApiV1DiagramPostBody}, TContext> => {

const mutationKey = ['createDiagramApiV1DiagramPost'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createDiagramApiV1DiagramPost>>, {data: CreateDiagramApiV1DiagramPostBody}> = (props) => {
          const {data} = props ?? {};

          return  createDiagramApiV1DiagramPost(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateDiagramApiV1DiagramPostMutationResult = NonNullable<Awaited<ReturnType<typeof createDiagramApiV1DiagramPost>>>
    export type CreateDiagramApiV1DiagramPostMutationBody = CreateDiagramApiV1DiagramPostBody
    export type CreateDiagramApiV1DiagramPostMutationError = AxiosError<HTTPValidationError>

    /**
 * @summary Create Diagram
 */
export const useCreateDiagramApiV1DiagramPost = <TError = AxiosError<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createDiagramApiV1DiagramPost>>, TError,{data: CreateDiagramApiV1DiagramPostBody}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof createDiagramApiV1DiagramPost>>,
        TError,
        {data: CreateDiagramApiV1DiagramPostBody},
        TContext
      > => {

      const mutationOptions = getCreateDiagramApiV1DiagramPostMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * Get diagram by id.
 * @summary Get Diagram By Id
 */
export const getDiagramByIdApiV1DiagramDiagramIdGet = (
    diagramId: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<DiagramDataResponse>> => {
    
    
    return axios.get(
      `http://localhost:8000/api/v1/diagram/${diagramId}`,options
    );
  }


export const getGetDiagramByIdApiV1DiagramDiagramIdGetQueryKey = (diagramId: string,) => {
    return [`http://localhost:8000/api/v1/diagram/${diagramId}`] as const;
    }

    
export const getGetDiagramByIdApiV1DiagramDiagramIdGetQueryOptions = <TData = Awaited<ReturnType<typeof getDiagramByIdApiV1DiagramDiagramIdGet>>, TError = AxiosError<HTTPValidationError>>(diagramId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDiagramByIdApiV1DiagramDiagramIdGet>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDiagramByIdApiV1DiagramDiagramIdGetQueryKey(diagramId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDiagramByIdApiV1DiagramDiagramIdGet>>> = ({ signal }) => getDiagramByIdApiV1DiagramDiagramIdGet(diagramId, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(diagramId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDiagramByIdApiV1DiagramDiagramIdGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetDiagramByIdApiV1DiagramDiagramIdGetQueryResult = NonNullable<Awaited<ReturnType<typeof getDiagramByIdApiV1DiagramDiagramIdGet>>>
export type GetDiagramByIdApiV1DiagramDiagramIdGetQueryError = AxiosError<HTTPValidationError>


export function useGetDiagramByIdApiV1DiagramDiagramIdGet<TData = Awaited<ReturnType<typeof getDiagramByIdApiV1DiagramDiagramIdGet>>, TError = AxiosError<HTTPValidationError>>(
 diagramId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDiagramByIdApiV1DiagramDiagramIdGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDiagramByIdApiV1DiagramDiagramIdGet>>,
          TError,
          Awaited<ReturnType<typeof getDiagramByIdApiV1DiagramDiagramIdGet>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetDiagramByIdApiV1DiagramDiagramIdGet<TData = Awaited<ReturnType<typeof getDiagramByIdApiV1DiagramDiagramIdGet>>, TError = AxiosError<HTTPValidationError>>(
 diagramId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDiagramByIdApiV1DiagramDiagramIdGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDiagramByIdApiV1DiagramDiagramIdGet>>,
          TError,
          Awaited<ReturnType<typeof getDiagramByIdApiV1DiagramDiagramIdGet>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetDiagramByIdApiV1DiagramDiagramIdGet<TData = Awaited<ReturnType<typeof getDiagramByIdApiV1DiagramDiagramIdGet>>, TError = AxiosError<HTTPValidationError>>(
 diagramId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDiagramByIdApiV1DiagramDiagramIdGet>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Diagram By Id
 */

export function useGetDiagramByIdApiV1DiagramDiagramIdGet<TData = Awaited<ReturnType<typeof getDiagramByIdApiV1DiagramDiagramIdGet>>, TError = AxiosError<HTTPValidationError>>(
 diagramId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDiagramByIdApiV1DiagramDiagramIdGet>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetDiagramByIdApiV1DiagramDiagramIdGetQueryOptions(diagramId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Update existing diagram by ID.
 * @summary Update Diagram
 */
export const updateDiagramApiV1DiagramDiagramIdPut = (
    diagramId: string,
    updateDiagramApiV1DiagramDiagramIdPutBody: UpdateDiagramApiV1DiagramDiagramIdPutBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<DiagramDataResponse>> => {
    
    
    return axios.put(
      `http://localhost:8000/api/v1/diagram/${diagramId}`,
      updateDiagramApiV1DiagramDiagramIdPutBody,options
    );
  }



export const getUpdateDiagramApiV1DiagramDiagramIdPutMutationOptions = <TError = AxiosError<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateDiagramApiV1DiagramDiagramIdPut>>, TError,{diagramId: string;data: UpdateDiagramApiV1DiagramDiagramIdPutBody}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof updateDiagramApiV1DiagramDiagramIdPut>>, TError,{diagramId: string;data: UpdateDiagramApiV1DiagramDiagramIdPutBody}, TContext> => {

const mutationKey = ['updateDiagramApiV1DiagramDiagramIdPut'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateDiagramApiV1DiagramDiagramIdPut>>, {diagramId: string;data: UpdateDiagramApiV1DiagramDiagramIdPutBody}> = (props) => {
          const {diagramId,data} = props ?? {};

          return  updateDiagramApiV1DiagramDiagramIdPut(diagramId,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateDiagramApiV1DiagramDiagramIdPutMutationResult = NonNullable<Awaited<ReturnType<typeof updateDiagramApiV1DiagramDiagramIdPut>>>
    export type UpdateDiagramApiV1DiagramDiagramIdPutMutationBody = UpdateDiagramApiV1DiagramDiagramIdPutBody
    export type UpdateDiagramApiV1DiagramDiagramIdPutMutationError = AxiosError<HTTPValidationError>

    /**
 * @summary Update Diagram
 */
export const useUpdateDiagramApiV1DiagramDiagramIdPut = <TError = AxiosError<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateDiagramApiV1DiagramDiagramIdPut>>, TError,{diagramId: string;data: UpdateDiagramApiV1DiagramDiagramIdPutBody}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof updateDiagramApiV1DiagramDiagramIdPut>>,
        TError,
        {diagramId: string;data: UpdateDiagramApiV1DiagramDiagramIdPutBody},
        TContext
      > => {

      const mutationOptions = getUpdateDiagramApiV1DiagramDiagramIdPutMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * Get last modified diagram.
 * @summary Get Last Modified Diagram
 */
export const getLastModifiedDiagramApiV1DiagramLastGet = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<DiagramDataResponse>> => {
    
    
    return axios.get(
      `http://localhost:8000/api/v1/diagram/last/`,options
    );
  }


export const getGetLastModifiedDiagramApiV1DiagramLastGetQueryKey = () => {
    return [`http://localhost:8000/api/v1/diagram/last/`] as const;
    }

    
export const getGetLastModifiedDiagramApiV1DiagramLastGetQueryOptions = <TData = Awaited<ReturnType<typeof getLastModifiedDiagramApiV1DiagramLastGet>>, TError = AxiosError<unknown>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLastModifiedDiagramApiV1DiagramLastGet>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetLastModifiedDiagramApiV1DiagramLastGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getLastModifiedDiagramApiV1DiagramLastGet>>> = ({ signal }) => getLastModifiedDiagramApiV1DiagramLastGet({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getLastModifiedDiagramApiV1DiagramLastGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetLastModifiedDiagramApiV1DiagramLastGetQueryResult = NonNullable<Awaited<ReturnType<typeof getLastModifiedDiagramApiV1DiagramLastGet>>>
export type GetLastModifiedDiagramApiV1DiagramLastGetQueryError = AxiosError<unknown>


export function useGetLastModifiedDiagramApiV1DiagramLastGet<TData = Awaited<ReturnType<typeof getLastModifiedDiagramApiV1DiagramLastGet>>, TError = AxiosError<unknown>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLastModifiedDiagramApiV1DiagramLastGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLastModifiedDiagramApiV1DiagramLastGet>>,
          TError,
          Awaited<ReturnType<typeof getLastModifiedDiagramApiV1DiagramLastGet>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetLastModifiedDiagramApiV1DiagramLastGet<TData = Awaited<ReturnType<typeof getLastModifiedDiagramApiV1DiagramLastGet>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLastModifiedDiagramApiV1DiagramLastGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLastModifiedDiagramApiV1DiagramLastGet>>,
          TError,
          Awaited<ReturnType<typeof getLastModifiedDiagramApiV1DiagramLastGet>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetLastModifiedDiagramApiV1DiagramLastGet<TData = Awaited<ReturnType<typeof getLastModifiedDiagramApiV1DiagramLastGet>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLastModifiedDiagramApiV1DiagramLastGet>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Last Modified Diagram
 */

export function useGetLastModifiedDiagramApiV1DiagramLastGet<TData = Awaited<ReturnType<typeof getLastModifiedDiagramApiV1DiagramLastGet>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLastModifiedDiagramApiV1DiagramLastGet>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetLastModifiedDiagramApiV1DiagramLastGetQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}
